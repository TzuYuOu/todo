{"version":3,"sources":["components/Form.js","components/Todo.js","components/TodoList.js","App.js","reportWebVitals.js","index.js"],"names":["Form","todos","setTodos","setStatus","useState","inputText","setInputText","action","type","onChange","e","target","value","onClick","preventDefault","text","completed","id","Math","random","className","name","Todo","todo","map","item","filter","ele","TodoList","filteredTodos","App","status","setFilteredTodos","useEffect","filterHandler","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.97066ce5.chunk.js","sourcesContent":["import { useState } from \"react\";\n\n\nconst Form = ({ todos, setTodos, setStatus}) => {\n\n  const [inputText, setInputText] = useState(\"\");\n\n  const submitTodoHandler = (e) => {\n    e.preventDefault();\n\n    // check input is not empty\n    if(inputText){\n      setTodos([\n        ...todos,\n        { text: inputText, completed: false, id: Math.random()*1000 }\n      ]);\n    }\n    \n    setInputText(\"\");\n  }\n\n  const statusHandler = (e) => {\n    // console.log(e.target.value);\n    setStatus(e.target.value);\n  }\n\n  return (\n    <form action=\"\">\n      <input \n        type=\"text\"\n        onChange={(e) => setInputText(e.target.value)}\n        value={inputText}\n\n      />\n      <button \n        type=\"submit\"\n        onClick={submitTodoHandler}\n      >\n        +\n      </button>\n      <div className=\"select\">\n        <select onChange={statusHandler} className=\"filter-todo\" name=\"todos\" id=\"\">\n          <option value=\"all\">All</option>\n          <option value=\"completed\">Completed</option>\n          <option value=\"uncompleted\">Uncompleted</option>\n        </select>\n      </div>\n    </form>\n  )\n}\n\n\nexport default Form;","\nconst Todo = ({text, todo, todos, setTodos}) => {\n\n  const deleteHandler = () => {\n    setTodos(todos.filter(ele => ele.id !== todo.id))\n  }\n\n  const completedHandler = () => {\n    setTodos(todos.map((item) => {\n      if(item.id === todo.id){\n        return {\n          ...item, completed: !item.completed\n        }\n      }\n      return item;\n    }));\n  };\n  \n\n  return (\n    <div className=\"todo\">\n      <li className={`todo-item ${todo.completed ? \"completed\" : \"\"}`}>{text}</li>\n      <button onClick={completedHandler} className=\"complete-btn\">v</button>\n      <button onClick={deleteHandler} className=\"trash-btn\">x</button>\n    </div>\n  )\n}\n\nexport default Todo","import Todo from './Todo';\n\nconst TodoList = ({todos, setTodos, filteredTodos}) => {\n\n  return (\n    <div className=\"todo-container\">\n      <ul className=\"todo-list\">\n        {\n          filteredTodos.map(todo => (\n            <Todo setTodos={setTodos} todos={todos} todo={todo} text={todo.text} key={todo.id} />\n          ))\n        }\n        \n      </ul>\n    </div>\n  )\n\n}\n\nexport default TodoList;","import './App.css';\n\nimport React, { useEffect } from \"react\";\nimport Form from \"./components/Form\";\nimport TodoList from \"./components/TodoList\";\nimport { useState } from \"react\";\n\nfunction App() {\n\n\n  // const [inputText, setInputText] = useState(\"\");\n  const [todos, setTodos] = useState([]);\n  const [status, setStatus] = useState(\"all\");\n  const [filteredTodos, setFilteredTodos] = useState([]);\n\n  \n\n  useEffect(() => {\n    const filterHandler = () =>{\n      switch (status) {\n        case \"completed\":\n          setFilteredTodos(todos.filter(todo => todo.completed === true))\n          break;\n        \n        case \"uncompleted\":\n          setFilteredTodos(todos.filter(todo => todo.completed === false))\n          break;\n  \n        default:\n          setFilteredTodos(todos)\n          break;\n      }\n    }\n\n    filterHandler();\n  }, [status, todos])\n\n  return (\n    <div className=\"App\">\n      <header>\n        <h1>Ou's Todo List</h1>\n      </header>\n      \n      \n      <Form \n        todos={todos} \n        setTodos={setTodos} \n        // inputText={inputText} \n        // setInputText={setInputText}\n        setStatus={setStatus}\n      />\n      <TodoList \n        setTodos={setTodos} \n        todos={todos}\n        filteredTodos={filteredTodos}/>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}